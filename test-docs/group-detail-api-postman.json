{
	"info": {
		"_postman_id": "group-detail-api-collection",
		"name": "Group Detail API",
		"description": "Collection for testing Group Detail API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Group Detail - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('groupId');",
							"    pm.expect(jsonData).to.have.property('groupName');",
							"    pm.expect(jsonData).to.have.property('groupInviteCode');",
							"    pm.expect(jsonData).to.have.property('groupLeader');",
							"    pm.expect(jsonData).to.have.property('members');",
							"    pm.expect(jsonData).to.have.property('totalMembersCount');",
							"});",
							"",
							"pm.test(\"Group leader has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    var leader = jsonData.groupLeader;",
							"    pm.expect(leader).to.have.property('userId');",
							"    pm.expect(leader).to.have.property('userFullName');",
							"    pm.expect(leader).to.have.property('userAvatarUrl');",
							"    pm.expect(leader).to.have.property('role');",
							"    pm.expect(leader.role).to.eql('ADMIN');",
							"});",
							"",
							"pm.test(\"Members array is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.members).to.be.an('array');",
							"    if (jsonData.members.length > 0) {",
							"        jsonData.members.forEach(function(member) {",
							"            pm.expect(member).to.have.property('userId');",
							"            pm.expect(member).to.have.property('userFullName');",
							"            pm.expect(member).to.have.property('userAvatarUrl');",
							"            pm.expect(member).to.have.property('role');",
							"        });",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/groups/{{group_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				},
				"description": "Get detailed information about a specific group including leader and members"
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9...",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/groups/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"groups",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"groupId\": 1,\n    \"groupName\": \"Study Group Java\",\n    \"groupInviteCode\": \"abc123def456\",\n    \"groupAvatarUrl\": \"https://example.com/group-avatar.jpg\",\n    \"groupCreatedDate\": \"2024-01-15T10:30:00\",\n    \"groupIsActive\": true,\n    \"groupLeader\": {\n        \"userId\": 1,\n        \"userFullName\": \"John Doe\",\n        \"userAvatarUrl\": \"https://example.com/john-avatar.jpg\",\n        \"role\": \"ADMIN\"\n    },\n    \"members\": [\n        {\n            \"userId\": 2,\n            \"userFullName\": \"Jane Smith\",\n            \"userAvatarUrl\": \"https://example.com/jane-avatar.jpg\",\n            \"role\": \"MEMBER\"\n        },\n        {\n            \"userId\": 3,\n            \"userFullName\": \"Bob Johnson\",\n            \"userAvatarUrl\": \"https://example.com/bob-avatar.jpg\",\n            \"role\": \"MEMBER\"\n        }\n    ],\n    \"totalMembersCount\": 3\n}"
				}
			]
		},
		{
			"name": "Get Group Detail - Group Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('Group not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/groups/999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"groups",
						"999"
					]
				},
				"description": "Test with non-existent group ID"
			},
			"response": [
				{
					"name": "Group Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9...",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/groups/999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"groups",
								"999"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-01-15T10:30:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"message\": \"Group not found with ID: 999\",\n    \"path\": \"/api/groups/999\"\n}"
				}
			]
		},
		{
			"name": "Get Group Detail - Invalid Group ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message contains validation error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('Invalid');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/groups/invalid",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"groups",
						"invalid"
					]
				},
				"description": "Test with invalid group ID format"
			},
			"response": [
				{
					"name": "Invalid Group ID",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9...",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/groups/invalid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"groups",
								"invalid"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-01-15T10:30:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": \"Invalid group ID format\",\n    \"path\": \"/api/groups/invalid\"\n}"
				}
			]
		},
		{
			"name": "Get Group Detail - Unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Unauthorized error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('Unauthorized');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/groups/{{group_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"groups",
						"{{group_id}}"
					]
				},
				"description": "Test without authentication token"
			},
			"response": [
				{
					"name": "Unauthorized",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/groups/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"groups",
								"1"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-01-15T10:30:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"message\": \"Unauthorized access\",\n    \"path\": \"/api/groups/1\"\n}"
				}
			]
		},
		{
			"name": "Get Group Detail - Inactive Group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message indicates inactive group\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include('not active');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/groups/{{inactive_group_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"groups",
						"{{inactive_group_id}}"
					]
				},
				"description": "Test with inactive group ID"
			},
			"response": [
				{
					"name": "Inactive Group",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9...",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/groups/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"groups",
								"2"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-01-15T10:30:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": \"Group is not active\",\n    \"path\": \"/api/groups/2\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "Base URL for the API"
		},
		{
			"key": "group_id",
			"value": "1",
			"type": "string",
			"description": "Valid group ID for testing"
		},
		{
			"key": "inactive_group_id",
			"value": "2",
			"type": "string",
			"description": "Inactive group ID for testing"
		},
		{
			"key": "access_token",
			"value": "your_jwt_token_here",
			"type": "string",
			"description": "JWT access token for authentication"
		}
	]
} 