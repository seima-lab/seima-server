# Production Configuration for SEIMA Server
# Based on application-dev.yaml structure

app:
  lab-name: Seima Lab
  name: seima-server-dev
  port: 8081
  swagger:
    contact-name: Jason Nguyen
    contact-mail: syhaoc2dh@gmail.com
    contact-url: https://syhaoc2dh.com
    app-description: "Documentation for the Spring Boot Project"
    app-version: 3.4.0
    app-license-url: https://www.apache.org/licenses/LICENSE-2.0.html
    app-license: Apache 2.0
  datasource:
    username:
    password:
    url: jdbc:mysql://seima-db-official.mysql.database.azure.com:3306/seima_database_official?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
  oauth2:
    redirect-uri: seimaapp://auth/success
  email:
    otp-register:
      html-template: "user-otp-verify"
      subject: "Seima - OTP Registration"

# Server configuration
server:
  port: ${app.port}
  servlet:
    session:
      cookie:
        secure: true

# Spring configuration
spring:
  application:
    name: ${app.name}
  datasource:
    url: ${app.datasource.url}
    username: ${app.datasource.username}
    password: ${app.datasource.password}
    driver-class-name: ${app.datasource.driver-class-name}
  jpa:
    database: mysql
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${YOUR_GOOGLE_CLIENT_ID}
            client-secret: ${YOUR_GOOGLE_CLIENT_SECRET}
            scope: openid,profile,email
  jackson:
    property-naming-strategy: SNAKE_CASE
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: smtp.gmail.com

# OTP configuration
otp:
  expiration-time: 300

# Redis configuration
redis:
  host: ${REDIS_HOST}
  port: ${REDIS_PORT}
  username: ${REDIS_USERNAME}
  password: ${REDIS_PASSWORD}

#JWT configuration
jwt:
  secret: aVeryLongAndRandomStringForHS512IsNeededHerePleaseMakeItSecure1234567890!@#$%^&*()_+
  access:
    token:
      expiration: 3600 # in seconds
  refresh:
    token:
      expiration: 604800 # in seconds (7 days)
